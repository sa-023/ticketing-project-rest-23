/*
 * ðŸ¦‹ Log Statement
 * â–  2024-01-22 04:09:42.945  INFO 507 --- [  restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
 * 1. 2024-01-22 04:09:42.945              : Date and Time
 * 2. INFO                                 : Log Level
 * 3. 507                                  : Process ID (Uniquely identify an active process)
 * 4. ---                                  : Separator (To indicate the start of the actual log messages)
 * 5. [  restartedMain]                    : Thread Name (Name of a tread performing the logging)
 * 6. com.zaxxer.hikari.HikariDataSource   : Logger Name (Abbreviated source class name)
 * 7. HikariPool-1 - Starting...           : Message (Actual Message)
 *
 * ðŸ¦‹ Storage for Logs
 * Â· Based on the logging configuration, log statements can be logged in various mediums such as in the console, files,
 *   and database. However, console and file-based logging are the dominant logging types and are most frequently used in an application.
 * Â· Although console logging works well in development time, in a production application, you need the log the application
 *   log statements in a file so that the file can be referred to in the future.
 * Â· There are the size and time-based policies to roll over the log file to a new file.
 *   Â· logging.logback.rollingpolicy.max-file-size  Â· logging.logback.rollingpolicy.max-history
 *
 * ðŸ¦‹ Log Frameworks
 * Â· Spring Boot -> Commons Logging (Internal Logging)
 *              -> SLF4J (Public APIs) -> Java Util Logging
 *                                     -> LOG4J2
 *                                     -> Logback (Default with any spring-boot-starter dependency)
 *
 * ðŸ¦‹ Log Level:
 * Â· TRACE Â· DEBUG Â· INFO(DEfault Root Level) Â· WARN Â· ERROR Â· FATAL.
 * Â· A logging level demonstrates the importance of the log statement.
 * Â· Any log statement logged with FATAL or ERROR indicates some serious issues in the application processing.
 *   Whereas INFO or DEBUG for example indicates typical regular application activities which you probably could ignore
 * Â· Spring Boot log statements with INFO, WARN, and ERROR levels. If you need other logging levels such as TRACE, or
 *   DEBUG, you can configure the associated properties in the application.properties file.
 *
 * ðŸ¦‹ Log4j2
 * Â· Log4j2 provides support for SLF4J, automatically reloads your logging configuration
 * Â· It allows for easy configuration of advanced logging best practices such as rolling files, different types of logging
 *   output destinations, support for structured logging formats
 *
 * ðŸ¦‹ Log4j2 Architecture
 * Â· Configuration: the root element of a log4j2 configuration file; the status attribute represents the level at which internal log4j events should be logged
 * Â· Appenders: An appender in a logging framework primarily decides two main things â€“ where the log messages should go, and what
 *   should be the logging format. Based on the destination of the log messages, there are several appender types.
 * Â· Loggers: A logger is a logging framework component that is responsible for logging the log messages using one or more appenders.
 *   You can define several loggers with various logging levels based on your need.
 *
 * ðŸ¦‹ SLF4J
 * Â· The Simple Logging Facade for Java (SLF4J) serves as a simple facade or abstraction for various logging frameworks, such as java.util.logging, logback and Log4j2.
 * Â· SLF4J allows the end-user to plug in the desired logging framework at deployment time.
 * Â· Spring Boot chose Logback as its preferred alternative. If you add the spring-boot-starter logging to your dependencies,
 *   it will be pulled in by any starter package you use. Then a basic SLF4J+Logback configuration will be automatically generated by Spring.
 * Â· If we want to use SLF4J+Log4j2 in a Spring application, then weâ€™ll have to exclude the spring-boot-starter-logging
 *   dependency and replace it for the spring-boot-starter-log4j2 one.
 *
 *
 */





